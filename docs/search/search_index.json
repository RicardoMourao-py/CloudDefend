{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"apiProxy/","title":"API Gateway Proxy","text":""},{"location":"apiProxy/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Caso seu objetivo seja boas pr\u00e1ticas na hospedagem de um site est\u00e1tico, na qual voc\u00ea quer utilizar o endpoint fornecido da API Gateway (utilizando ela como proxy), esse \u00e9 o tutorial adequado para voc\u00ea. Vamos utilizar os recursos do terraform para montar nossa infraestrutura.</p> <p>Observe Abaixo a Arquitetura:</p>"},{"location":"apiProxy/#_1","title":"<b> API Gateway Proxy </b>","text":""},{"location":"apiProxy/#metodologia","title":"Metodologia","text":"<ol> <li>Em primeiro momento, se ainda n\u00e3o clonou, no seu diret\u00f3rio clone o reposit\u00f3rio e entre na raiz do reposit\u00f3rio. Se clonou, siga para a etapa 2: <pre><code>git clone https://github.com/RicardoMourao-py/CloudDefend.git\n</code></pre></li> <li>Entre na branch <code>api</code> com o comando abaixo: <pre><code>git checkout api\n</code></pre></li> <li>Na pasta ra\u00edz, exporte as credenciais da sua conta da AWS no terminal: <pre><code>export AWS_ACCESS_KEY_ID=&lt;ID_CHAVE_DE_ACESSO&gt;\nexport AWS_SECRET_ACCESS_KEY=&lt;CHAVE_SECRETA_DE_ACESSO&gt;\n</code></pre></li> <li>Modifique o <code>index.html</code> e o <code>error.html</code> de acordo com o site est\u00e1tico que deseja gerar para o usu\u00e1rio.</li> <li>Inicie o ambiente Terraform, carregando as depend\u00eancias necess\u00e1rias: <pre><code>terraform init\n</code></pre></li> <li>Aplique e solicite ao terraform que provisione os recursos solicitados na nuvem: <pre><code>terraform apply\n</code></pre></li> <li>Por fim, visualize se foi criado corretamente a infraestrutura no console da AWS.</li> </ol>"},{"location":"apiProxy/#imagens-de-verificacao","title":"Imagens de Verifica\u00e7\u00e3o","text":"<p> Tela de In\u00edcio da API </p> <p> Tela com o Fluxo do M\u00e9todo na Raiz </p> <p> Tela com o Fluxo do M\u00e9todo do Recurso </p> <p> Tela Stage do MyS3 com o seu Endpoint </p> <p> Tela de Pol\u00edtica do Bucket integrada a API </p> <p>Warning</p> <p>Observe que caso queira acessar o site pelo endpoint fornecido no S3 n\u00e3o \u00e9 mais poss\u00edvel, e sim apenas pelo endpoint da API.</p>"},{"location":"apiProxy/#codigo","title":"C\u00f3digo","text":"<p>O c\u00f3digo por completo se encontra no arquivo <code>main.tf</code>. As etapas abaixo explicam o passo a passo para cada recurso criado pelo terraform. Vale ressaltar, esta etapa segue este tutorial da aws</p> <p>Em primeiro momento, \u00e9 criado o provider da infraestrutura do nosso projeto, respons\u00e1vel por especificar a regi\u00e3o onde vamos trabalhar:</p> main.tf<pre><code># Provide AWS Credentials\nprovider \"aws\" {\nregion = \"us-east-1\"\n}\n</code></pre> <p>Logo em seguida, h\u00e1 a configura\u00e7\u00e3o das pol\u00edticas necess\u00e1rias para execu\u00e7\u00e3o do projeto. \u00c9 criado uma fun\u00e7\u00e3o do IAM contendo uma pol\u00edtica de confian\u00e7a para que a API Gateway assuma a fun\u00e7\u00e3o. \u00c9 criado uma pol\u00edtica do AWS Identity and Access Management (IAM) com permiss\u00e3o para a API GetObject para o bucket do Amazon S3. \u00c9 anexado a pol\u00edtica de acesso criada anteriormente na role da API Gateway. \u00c9 criada uma pol\u00edtica do bucket para permitir que o proxy da API acesse apenas o bucket do Amazon S3:</p> main.tf<pre><code># Cria fun\u00e7\u00e3o da integra\u00e7\u00e3o com a pol\u00edtica necess\u00e1ria\nresource \"aws_iam_role\" \"s3_api_gateyway_role\" {\nname = \"s3-api-gateyway-role\"\nassume_role_policy = &lt;&lt;EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"apigateway.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n} \n  EOF\n}\n# Anexar pol\u00edtica de acesso S3 \u00e0 fun\u00e7\u00e3o de gateway de API\nresource \"aws_iam_role_policy_attachment\" \"s3_policy_attach\" {\nrole       = \"${aws_iam_role.s3_api_gateyway_role.name}\"\npolicy_arn = \"${aws_iam_policy.s3_policy.arn}\"  }\n# Create S3 Full Access Policy\nresource \"aws_iam_policy\" \"s3_policy\" {\nname        = \"s3-policy\"\ndescription = \"Policy for allowing all S3 Actions\"\npolicy = &lt;&lt;EOF\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"s3:*\",\n            \"Resource\": \"*\"\n        }\n    ]\n}\nEOF\n}\n# Cria a pol\u00edtica do bucket\nresource \"aws_s3_bucket_policy\" \"bucket_policy\" {\nbucket = aws_s3_bucket.site_bucket.id\npolicy = data.aws_iam_policy_document.allow_access_from_another_account.json\n}\n# cria um IAM para ser referenciado na pol\u00edtica do bucket\ndata \"aws_iam_policy_document\" \"allow_access_from_another_account\" {\nversion = \"2012-10-17\"\nstatement {\nsid     = \"APIProxyBucketPolicy\"\nactions = [\"s3:GetObject\"]\neffect  = \"Allow\"\nprincipals {\ntype        = \"Service\"\nidentifiers = [\"apigateway.amazonaws.com\"]\n}\nresources = [\"arn:aws:s3:::check-request-2/*\"]\ncondition {\ntest     = \"ArnLike\"\nvariable = \"aws:SourceArn\"\nvalues   = [\"arn:aws:execute-api:us-east-1:108791993403:${aws_api_gateway_rest_api.MyS3.id}/*/GET/\"]\n}\n}\n}\n</code></pre> <p>Nesta etapa \u00e9 criado o bucket S3 com todas as configura\u00e7\u00f5es necess\u00e1rias para a hospedagem do site est\u00e1tico com seguran\u00e7a. \u00c9 criado um bucket S3, com nome <code>check-request-2</code>. Al\u00e9m disso, \u00e9 habilitado o versionamento o seu versionamento. Por fim, \u00e9 adicionado e configurado os arquivos <code>index.html</code> e <code>error.html</code> no bucket. Ademais, nesse trecho de c\u00f3digo, \u00e9 configurado os arquivos de \u00edndice e de erro. Em seguida, \u00e9 configurado o acesso p\u00fablico do bucket:</p> main.tf<pre><code>resource \"aws_s3_bucket\" \"site_bucket\" {\nbucket = \"check-request-2\"\n}\nresource \"aws_s3_bucket_versioning\" \"versioning_S3\" {\nbucket = aws_s3_bucket.site_bucket.id\nversioning_configuration {\nstatus = \"Enabled\"\n}\n}\nresource \"aws_s3_object\" \"index\" {\nbucket = aws_s3_bucket.site_bucket.id\nkey    = \"index.html\"\nsource = \"index.html\"\ncontent_type = \"text/html\"\n}\nresource \"aws_s3_object\" \"error\" {\nbucket = aws_s3_bucket.site_bucket.id\nkey    = \"error.html\"\nsource = \"error.html\"\ncontent_type = \"text/html\"\n}\nresource \"aws_s3_bucket_website_configuration\" \"site_bucket\" {\nbucket = aws_s3_bucket.site_bucket.id\nindex_document {\nsuffix = \"index.html\"\n}\nerror_document {\nkey = \"error.html\"\n}\n}\nresource \"aws_s3_bucket_public_access_block\" \"meu_bucket\" {\nbucket = aws_s3_bucket.site_bucket.id\nblock_public_acls       = false\nblock_public_policy     = false\nignore_public_acls      = false\nrestrict_public_buckets = false\n}\n</code></pre> <p>Nesta etapa \u00e9 criada a API Gateway com todas as configura\u00e7\u00f5es necess\u00e1rias para funcionar como proxy. Sendo assim, o client s\u00f3 conseguir\u00e1 acessar o site com o endpoint da API. Em primeiro momento, \u00e9 criado a API Gateway com seu respectivo nome. Logo em seguida, \u00e9 criado um m\u00e9todo GET na raiz da API e a sua integra\u00e7\u00e3o usa como propriedades HTTP_METHOD do tipo GET, tipo AWS Service, conex\u00e3o com o buclet S3 no arquivo index.html. Al\u00e9m disso, a configura\u00e7\u00e3o \u00e9 finalizada com o arn da role criada na etapa de pol\u00edticas. \u00c9 criado o recurso <code>{object}</code> e um m\u00e9todo GET dentro do recurso. Ademais, a sua integra\u00e7\u00e3o segue os mesmos princ\u00edpios que a etapa anterior, com a \u00fanica exce\u00e7\u00e3o que esse m\u00e9todo tem no integration request,  a configura\u00e7\u00e3o do URL path Parameters. \u00c9 configurado o Method Response do GET raiz e o GET do object, al\u00e9m de habilitar <code>method.response.header.Content-Type</code> para a pr\u00f3xima etapa. Ademais, \u00e9 configurado o integration response com os par\u00e2metros necess\u00e1rios para adicionar um valor em <code>Content-Type</code>, criado na etapa anterior, no integration response. Por fim, \u00e9 feito deploy da aplica\u00e7\u00e3o com o nome do est\u00e1gio MyS3: </p> main.tf<pre><code># Cria API REST\nresource \"aws_api_gateway_rest_api\" \"MyS3\" {\nname        = \"MyS3\"\ndescription = \"API for S3 Integration\"\n}\n# Cria o m\u00e9todo na raiz\nresource \"aws_api_gateway_method\" \"GetBuckets1\" {\nrest_api_id   = \"${aws_api_gateway_rest_api.MyS3.id}\"\nresource_id   = \"${aws_api_gateway_rest_api.MyS3.root_resource_id}\"\nhttp_method   = \"GET\"\nauthorization = \"NONE\"\n}\n# Etapa para a integra\u00e7\u00e3o do S3 no GET raiz\nresource \"aws_api_gateway_integration\" \"S3Integration1\" {\ndepends_on = [aws_api_gateway_method.GetBuckets1]\nrest_api_id = \"${aws_api_gateway_rest_api.MyS3.id}\"\nresource_id = \"${aws_api_gateway_rest_api.MyS3.root_resource_id}\"\nhttp_method = \"${aws_api_gateway_method.GetBuckets1.http_method}\"\nintegration_http_method = \"GET\"\ntype = \"AWS\"\nuri         = \"arn:aws:apigateway:us-east-1:s3:path/check-request-2/index.html\"\ncredentials = \"${aws_iam_role.s3_api_gateyway_role.arn}\"\n}\n# Criando recurso\nresource \"aws_api_gateway_resource\" \"Object\" {\nrest_api_id = \"${aws_api_gateway_rest_api.MyS3.id}\"\nparent_id   = \"${aws_api_gateway_rest_api.MyS3.root_resource_id}\"\npath_part   = \"{object}\"\n}\n# Cria o m\u00e9todo no recurso\nresource \"aws_api_gateway_method\" \"GetBuckets2\" {\nrest_api_id   = \"${aws_api_gateway_rest_api.MyS3.id}\"\nresource_id   = \"${aws_api_gateway_resource.Object.id}\"\nhttp_method   = \"GET\"\nauthorization = \"NONE\"\nrequest_parameters = {\n\"method.request.path.object\" = true\n}\n}\n# Etapa para a integra\u00e7\u00e3o do S3 no GET do object\nresource \"aws_api_gateway_integration\" \"S3Integration2\" {\nrest_api_id = \"${aws_api_gateway_rest_api.MyS3.id}\"\nresource_id = \"${aws_api_gateway_resource.Object.id}\"\nhttp_method = \"${aws_api_gateway_method.GetBuckets2.http_method}\"\nintegration_http_method = \"GET\"\ntype = \"AWS\"\nuri         = \"arn:aws:apigateway:us-east-1:s3:path/check-request-2/{object}\"\ncredentials = \"${aws_iam_role.s3_api_gateyway_role.arn}\"\nrequest_parameters = {\n\"integration.request.path.object\" = \"method.request.path.object\"\n}\n}\nresource \"aws_api_gateway_integration_response\" \"MyS3IntegrationResponse\" {\ndepends_on = [aws_api_gateway_integration.S3Integration1]\nrest_api_id = \"${aws_api_gateway_rest_api.MyS3.id}\"\nresource_id = \"${aws_api_gateway_rest_api.MyS3.root_resource_id}\"\nhttp_method = \"${aws_api_gateway_method.GetBuckets1.http_method}\"\nstatus_code       = \"200\"  response_parameters = {\n\"method.response.header.Content-Type\"   = \"integration.response.header.Content-Type\"\n}\n}\nresource \"aws_api_gateway_integration_response\" \"MyS3IntegrationResponse_object\" {\ndepends_on = [aws_api_gateway_integration.S3Integration2]\nrest_api_id = \"${aws_api_gateway_rest_api.MyS3.id}\"\nresource_id = \"${aws_api_gateway_resource.Object.id}\"\nhttp_method = \"${aws_api_gateway_method.GetBuckets2.http_method}\"\nstatus_code       = \"200\"  response_parameters = {\n\"method.response.header.Content-Type\"   = \"integration.response.header.Content-Type\"\n}\n}\nresource \"aws_api_gateway_method_response\" \"response_200\" {\nrest_api_id = aws_api_gateway_rest_api.MyS3.id\nresource_id = aws_api_gateway_rest_api.MyS3.root_resource_id\nhttp_method = aws_api_gateway_method.GetBuckets1.http_method\nstatus_code = \"200\"\nresponse_parameters = {\n\"method.response.header.Content-Type\" = true\n}\n}\nresource \"aws_api_gateway_method_response\" \"response_200_object\" {\nrest_api_id = aws_api_gateway_rest_api.MyS3.id\nresource_id = aws_api_gateway_resource.Object.id\nhttp_method = aws_api_gateway_method.GetBuckets2.http_method\nstatus_code = \"200\"\nresponse_parameters = {\n\"method.response.header.Content-Type\" = true\n}\n}\nresource \"aws_api_gateway_deployment\" \"S3APIDeployment\" {\ndepends_on  = [aws_api_gateway_method.GetBuckets1,\naws_api_gateway_method.GetBuckets2, aws_api_gateway_method_response.response_200_object,\naws_api_gateway_method_response.response_200, aws_api_gateway_integration_response.MyS3IntegrationResponse_object,\naws_api_gateway_integration_response.MyS3IntegrationResponse, aws_api_gateway_integration.S3Integration1,\naws_api_gateway_integration.S3Integration2, aws_api_gateway_resource.Object\n]\nrest_api_id = \"${aws_api_gateway_rest_api.MyS3.id}\"\n}\nresource \"aws_api_gateway_stage\" \"MyS3stage\" {\ndepends_on  = [aws_api_gateway_method.GetBuckets1, aws_api_gateway_deployment.S3APIDeployment,\naws_api_gateway_method.GetBuckets2, aws_api_gateway_method_response.response_200_object,\naws_api_gateway_method_response.response_200, aws_api_gateway_integration_response.MyS3IntegrationResponse_object,\naws_api_gateway_integration_response.MyS3IntegrationResponse, aws_api_gateway_integration.S3Integration1,\naws_api_gateway_integration.S3Integration2, aws_api_gateway_resource.Object\n]\nstage_name      = \"MyS3\"\nrest_api_id     = aws_api_gateway_rest_api.MyS3.id\ndeployment_id   = aws_api_gateway_deployment.S3APIDeployment.id\n}\n</code></pre>"},{"location":"hostedS3/","title":"Hospeda Site no S3","text":""},{"location":"hostedS3/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Caso seu objetivo seja apenas apenas a hospedagem de um site est\u00e1tico e nada mais, esse \u00e9 o tutorial adequado para voc\u00ea. Vamos utilizar os recursos do terraform para montar nossa infraestrutura.</p> <p>Observe Abaixo a Arquitetura:</p>"},{"location":"hostedS3/#_1","title":"<b> Hospeda Site no S3 </b>","text":""},{"location":"hostedS3/#metodologia","title":"Metodologia","text":"<ol> <li>Em primeiro momento, se ainda n\u00e3o clonou, no seu diret\u00f3rio clone o reposit\u00f3rio e entre na raiz do reposit\u00f3rio. Se clonou, siga para a etapa 2: <pre><code>git clone https://github.com/RicardoMourao-py/CloudDefend.git\n</code></pre></li> <li>Entre na branch <code>s3</code> com o comando abaixo: <pre><code>git checkout s3\n</code></pre></li> <li>Na pasta ra\u00edz, exporte as credenciais da sua conta da AWS no terminal: <pre><code>export AWS_ACCESS_KEY_ID=&lt;ID_CHAVE_DE_ACESSO&gt;\nexport AWS_SECRET_ACCESS_KEY=&lt;CHAVE_SECRETA_DE_ACESSO&gt;\n</code></pre></li> <li>Modifique o <code>index.html</code> e o <code>error.html</code> de acordo com o site est\u00e1tico que deseja gerar para o usu\u00e1rio.</li> <li>Inicie o ambiente Terraform, carregando as depend\u00eancias necess\u00e1rias: <pre><code>terraform init\n</code></pre></li> <li>Aplique e solicite ao terraform que provisione os recursos solicitados na nuvem: <pre><code>terraform apply\n</code></pre></li> <li>Por fim, visualize se foi criado corretamente a infraestrutura no console da AWS.</li> </ol>"},{"location":"hostedS3/#imagens-de-verificacao","title":"Imagens de Verifica\u00e7\u00e3o","text":"<p> Tela de In\u00edcio do Bucket </p> <p> Aba de propriedades do Bucket </p> <p> Aba de pol\u00edticas do Bucket </p> <p> Visualize se WebSite com seu Endpoint P\u00fablico </p>"},{"location":"hostedS3/#codigo","title":"C\u00f3digo","text":"<p>O c\u00f3digo por completo se encontra no arquivo <code>main.tf</code>. As etapas abaixo explicam o passo a passo para cada recurso criado pelo terraform. Vale ressaltar, esta etapa segue este tutorial da aws</p> <p>Primeiramente, \u00e9 definido no provider a regi\u00e3o na qual iremos trabalhar, em que no nosso caso \u00e9 Norte da Virg\u00ednia:</p> main.tf<pre><code>provider \"aws\" {\nregion = \"us-east-1\"\n}\n</code></pre> <p>Nesta etapa, \u00e9 definido sua acl, seu nome e seu versionamento.</p> main.tf<pre><code>resource \"aws_s3_bucket\" \"site_bucket\" {\nbucket = \"check-request-2\"\nacl    = \"private\"\nversioning {\nenabled = true\n}\n}\n</code></pre> <p>\u00c9 definido principlamente os arquivos do bucket, como tamb\u00e9m as suas chaves.</p> main.tf<pre><code>resource \"aws_s3_bucket_object\" \"index\" {\nbucket = aws_s3_bucket.site_bucket.id\nkey    = \"index.html\"\nsource = \"index.html\"\ncontent_type = \"text/html\"\n}\nresource \"aws_s3_bucket_object\" \"error\" {\nbucket = aws_s3_bucket.site_bucket.id\nkey    = \"error.html\"\nsource = \"error.html\"\ncontent_type = \"text/html\"\n}\n</code></pre> <p>Nesta etapa, \u00e9 configurado os arquivos de \u00edndice e de error do seu site. Observe abaixo que possu\u00edmos <code>depends_on</code>, logo, esse recurso s\u00f3 \u00e9 criado depois dos dois primeiros acima.</p> main.tf<pre><code>resource \"aws_s3_bucket_website_configuration\" \"site_bucket\" {\nbucket = aws_s3_bucket.site_bucket.id\nindex_document {\nsuffix = \"index.html\"\n}\nerror_document {\nkey = \"error.html\"\n}\ndepends_on = [\naws_s3_bucket_object.index,\naws_s3_bucket_object.error,\n]\n}\n</code></pre> <p>Al\u00e9m disso, \u00e9 configurado a etapa de acesso p\u00fablico da seguinte maneira:</p> main.tf<pre><code>resource \"aws_s3_bucket_public_access_block\" \"meu_bucket\" {\nbucket = aws_s3_bucket.site_bucket.id\nblock_public_acls       = false\nblock_public_policy     = false\nignore_public_acls      = false\nrestrict_public_buckets = false\n}\n</code></pre> <p>Finalmente, a pol\u00edtica \u00e9 criada logo ap\u00f3s o bucket ser configurado:</p> main.tf<pre><code>resource \"aws_s3_bucket_policy\" \"bucket_policy\" {\nbucket = aws_s3_bucket.site_bucket.id\npolicy = data.aws_iam_policy_document.allow_access_from_another_account.json\ndepends_on = [\naws_s3_bucket_website_configuration.site_bucket,\n]\n}\ndata \"aws_iam_policy_document\" \"allow_access_from_another_account\" {\nversion = \"2012-10-17\"\nstatement {\nactions = [\"s3:GetObject\"]\neffect  = \"Allow\"\nprincipals {\ntype        = \"AWS\"\nidentifiers = [\"*\"]\n}\nresources = [\"arn:aws:s3:::check-request-2/*\"]\n}\n}\n</code></pre>"},{"location":"init/","title":"Hospede um Site Est\u00e1tico com Seguran\u00e7a","text":"<ul> <li>Criador: Ricardo Mour\u00e3o Rodrigues Filho</li> <li>Ano de Cria\u00e7\u00e3o: 2023</li> <li>Email: ricardomrf@al.insper.edu.br</li> </ul>"},{"location":"init/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>A ideia principal dessa documenta\u00e7\u00e3o \u00e9 apresentar uma forma adequada de como hospedar um site est\u00e1tico no bucket S3 da AWS. Al\u00e9m disso, voc\u00ea precisa trazer seguran\u00e7a para o seu site, portanto, ensinamos o usu\u00e1rio a criar dois recursos importantes: API Gateway (Novo endpoint do seu site) e WAF(Verifica se as requisi\u00e7\u00f5es mandadas s\u00e3o maliciosas). Analise a arquitetura abaixo para um melhor entendimento:</p> <p></p> <p>Observe cada uma das etapas abaixo:</p> <p> - O usu\u00e1rio bate no endpoint da API Gateway. (O bucket S3 gera seu pr\u00f3prio endpoint, entretanto, a ideia \u00e9 que o cliente n\u00e3o tenha contato direto por ele)   - API Gateway identifica a requisi\u00e7\u00e3o.   - API Gateway manda a solicita\u00e7\u00e3o para o filtro do WAF.   - Quando chega ao filtro o WAF verifica as regras do owasp top ten, informando se a requisa\u00e7\u00e3o \u00e9 ou n\u00e3o \u00e9 maliciosa.   - Passando pelo filtro, o usu\u00e1rio tem acesso ao bucket S3.   - Consequentemente, ele retorna o site hospedado com a devida seguran\u00e7a. </p> <p>Observe que uma das ferramentas apontadas \u00e9 uso do terraform, na qual ele \u00e9 respons\u00e1vel em gerar a infraestrutura do nosso projeto. Sendo assim, tenha todos dos pr\u00e9-requisitos e siga as etapas abaixo para hospedar seu site est\u00e1tico com seguran\u00e7a.</p>"},{"location":"init/#pre-requisitos","title":"Pr\u00e9-Requisitos","text":"<ul> <li> <p>Conta na AWS com usu\u00e1rio IAM com permiss\u00f5es de Administrador.</p> </li> <li> <p>Baixar terraform na sua m\u00e1quina.    </p> </li> </ul>"},{"location":"init/#funcionalidades","title":"Funcionalidades","text":"<p>Esta aplica\u00e7\u00e3o buscou escalabilidade em todas as implementa\u00e7\u00f5es. Logo, caso o usu\u00e1rio queira apenas etapas espec\u00edficas, seguem as poss\u00edveis metodologias:</p> <ol> <li>Hospedagem de Site Est\u00e1tico (Entrega Completa C+)</li> <li>API Gateway como Proxy para Site Est\u00e1tico (Entrega Completa B)</li> <li>Prote\u00e7\u00e3o da Aplica\u00e7\u00e3o com WAF (Owasp Top Ten) (Entrega Completa A+)</li> </ol> <p>Warning</p> <p>\u00c9 fundamental seguir a etapa 3 acima (Prote\u00e7\u00e3o da Aplica\u00e7\u00e3o com WAF (Owasp Top Ten)), para garantir todas as funcionalidades apresentadas na introdu\u00e7\u00e3o.</p>"},{"location":"init/#implementacao","title":"Implementa\u00e7\u00e3o","text":"<p>No v\u00eddeo abaixo \u00e9 poss\u00edvel ver a implementa\u00e7\u00e3o do projeto completo.  </p>"},{"location":"waf/","title":"Prote\u00e7\u00e3o WAF","text":""},{"location":"waf/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Caso seu objetivo seja boas pr\u00e1ticas na hospedagem de um site est\u00e1tico, na qual voc\u00ea quer utilizar o endpoint fornecido da API Gateway (utilizando ela como proxy), mas al\u00e9m disso quer proteger seu WebSite de requisi\u00e7\u00f5es maliciosas, esse \u00e9 o tutorial adequado para voc\u00ea. Vamos utilizar os recursos do terraform para montar nossa infraestrutura.</p> <p>Observe abaixo a arquitetura:</p>"},{"location":"waf/#_1","title":"<b> Prote\u00e7\u00e3o WAF </b>","text":""},{"location":"waf/#metodologia","title":"Metodologia","text":"<p>Caso prefira, no v\u00eddeo abaixo \u00e9 poss\u00edvel ver a implementa\u00e7\u00e3o do projeto completo.</p> <ol> <li>Em primeiro momento, se ainda n\u00e3o clonou, no seu diret\u00f3rio clone o reposit\u00f3rio e entre na raiz do reposit\u00f3rio. Se clonou, siga para a etapa 2: <pre><code>git clone https://github.com/RicardoMourao-py/CloudDefend.git\n</code></pre></li> <li>Entre na branch <code>main</code> com o comando abaixo: <pre><code>git checkout main\n</code></pre></li> <li>Na pasta ra\u00edz, exporte as credenciais da sua conta da AWS no terminal: <pre><code>export AWS_ACCESS_KEY_ID=&lt;ID_CHAVE_DE_ACESSO&gt;\nexport AWS_SECRET_ACCESS_KEY=&lt;CHAVE_SECRETA_DE_ACESSO&gt;\n</code></pre></li> <li>Modifique o <code>index.html</code> e o <code>error.html</code> de acordo com o site est\u00e1tico que deseja gerar para o usu\u00e1rio.</li> <li>Inicie o ambiente Terraform, carregando as depend\u00eancias necess\u00e1rias: <pre><code>terraform init\n</code></pre></li> <li>Aplique e solicite ao terraform que provisione os recursos solicitados na nuvem: <pre><code>terraform apply\n</code></pre></li> <li>Por fim, visualize se foi criado corretamente a infraestrutura no console da AWS.</li> </ol> <p>Warning</p> <p>Caso obtenha um erro WAFUnavailableEntityException depois da etapa 6, de acordo com um f\u00f3rum da AWS pode ser necess\u00e1rio aguardar alguns minutos para criar alguns recursos que est\u00e3o associados, sendo assim, basta executar o comando novamente.</p>"},{"location":"waf/#imagens-de-verificacao","title":"Imagens de Verifica\u00e7\u00e3o","text":"<p> Tela de In\u00edcio do WAF </p> <p> Tela da WebACL com o grupo de regras OWASP </p> <p> Tela do grupo com as regras do OWASP Top Ten </p> <p> Tela do Est\u00e1gio da API associado a WebACL Criada </p>"},{"location":"waf/#codigo","title":"C\u00f3digo","text":"<p>O c\u00f3digo por completo se encontra no arquivo <code>main.tf</code>. As etapas abaixo explicam o passo a passo para cada recurso criado pelo terraform. Entretanto, vale ressaltar que s\u00f3 vamos explicar nessa aba, os recursos criados para o WAF, pois nesta aba da API Gateway como Proxy j\u00e1 explicamos as finalidades dos recursos criados.</p> <p>Warning</p> <p>Este c\u00f3digo foi baseado na documenta\u00e7\u00e3o do terraform, entretanto, o reposit\u00f3rio foi arquivado, dificultando as boas pr\u00e1ticas. Como solu\u00e7\u00e3o, foi adicionada a pasta <code>waf/</code> com todos os requisitos do owasp top ten de acordo com a refer\u00eancia.</p> <p>Para garantir total seguran\u00e7a para o site, foi implementado o WAF com todas as 10 principais regras do OWASP. Sendo assim, foi criado uma WebACL para um WafRegional com o nome de <code>VerifyRequest</code>. Al\u00e9m disso, foi settado um grupo de regras que vem do m\u00f3dulo criado de acordo com a documenta\u00e7\u00e3o do terraform. Por fim, \u00e9 associado a WebACL criada com o est\u00e1gio criado pela API Gateway.</p> main.tf<pre><code>module \"owasp_top_10\" {\n  # This module is published on the registry: https://registry.terraform.io/modules/traveloka/waf-owasp-top-10-rules    \n  # Open the link above to see what the latest version is. Highly encouraged to use the latest version if possible.\nsource = \"./waf\"\n  # For a better understanding of what are those parameters mean,\n  # please read the description of each variable in the variables.tf file:\n  # https://github.com/traveloka/terraform-aws-waf-owasp-top-10-rules/blob/master/variables.tf \nproduct_domain                 = \"tsi\"\nservice_name                   = \"tsiwaf\"\nenvironment                    = \"staging\"\ndescription                    = \"OWASP Top 10 rules for tsiwaf\"\ntarget_scope                   = \"regional\"\n}\nresource \"aws_wafregional_web_acl\" \"WafDefend\" {\nname        = \"VerifyRequest\"\nmetric_name = \"VerifyRequest\"\ndefault_action {\ntype = \"ALLOW\"\n}\nrule {\npriority = \"0\"\n    # ID of the associated WAF rule\nrule_id = module.owasp_top_10.rule_group_id\ntype = \"GROUP\"\noverride_action {\n      # Valid values are `NONE` and `COUNT`\ntype = \"NONE\"\n}\n}\n}\nresource \"aws_wafregional_web_acl_association\" \"AssociaWAF\" {\ndepends_on = [aws_api_gateway_stage.MyS3stage]\nresource_arn = aws_api_gateway_stage.MyS3stage.arn\nweb_acl_id   = aws_wafregional_web_acl.WafDefend.id\n}\n</code></pre>"}]}